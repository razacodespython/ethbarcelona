/// <reference types="node" />
import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type { Callback, NonPayableTransactionObject, BlockType, ContractEventLog, BaseContract } from "../../../../types";
export interface EventOptions {
    filter?: object;
    fromBlock?: BlockType;
    topics?: string[];
}
export type ChangedMasterCopy = ContractEventLog<{
    masterCopy: string;
    0: string;
}>;
export interface DailyLimitModule extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): DailyLimitModule;
    clone(): DailyLimitModule;
    methods: {
        NAME(): NonPayableTransactionObject<string>;
        VERSION(): NonPayableTransactionObject<string>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: string): NonPayableTransactionObject<void>;
        dailyLimits(arg0: string): NonPayableTransactionObject<{
            dailyLimit: string;
            spentToday: string;
            lastDay: string;
            0: string;
            1: string;
            2: string;
        }>;
        manager(): NonPayableTransactionObject<string>;
        /**
         * Setup function sets initial storage of contract.
         * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
         * @param tokens List of token addresses. Ether is represented with address 0x0.
         */
        setup(tokens: string[], _dailyLimits: (number | string | BN)[]): NonPayableTransactionObject<void>;
        /**
         * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
         * @param dailyLimit Daily limit in smallest token unit.
         * @param token Token contract address.
         */
        changeDailyLimit(token: string, dailyLimit: number | string | BN): NonPayableTransactionObject<void>;
        /**
         * Returns if Safe transaction is a valid daily limit transaction.
         * @param amount Amount of tokens (or Ether) that should be transfered
         * @param to Address to which the tokens should be transfered
         * @param token Address of the token that should be transfered (0 for Ether)
         * @returns Returns if transaction can be executed.
         */
        executeDailyLimit(token: string, to: string, amount: number | string | BN): NonPayableTransactionObject<void>;
        /**
         * Returns last midnight as Unix timestamp.
         * @returns Unix timestamp.
         */
        today(): NonPayableTransactionObject<string>;
    };
    events: {
        ChangedMasterCopy(cb?: Callback<ChangedMasterCopy>): EventEmitter;
        ChangedMasterCopy(options?: EventOptions, cb?: Callback<ChangedMasterCopy>): EventEmitter;
        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
    };
    once(event: "ChangedMasterCopy", cb: Callback<ChangedMasterCopy>): void;
    once(event: "ChangedMasterCopy", options: EventOptions, cb: Callback<ChangedMasterCopy>): void;
}
