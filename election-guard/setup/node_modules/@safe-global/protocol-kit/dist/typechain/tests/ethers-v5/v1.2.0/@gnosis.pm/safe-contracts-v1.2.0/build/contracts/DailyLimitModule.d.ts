import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../../common";
export interface DailyLimitModuleInterface extends utils.Interface {
    functions: {
        "NAME()": FunctionFragment;
        "VERSION()": FunctionFragment;
        "changeMasterCopy(address)": FunctionFragment;
        "dailyLimits(address)": FunctionFragment;
        "manager()": FunctionFragment;
        "setup(address[],uint256[])": FunctionFragment;
        "changeDailyLimit(address,uint256)": FunctionFragment;
        "executeDailyLimit(address,address,uint256)": FunctionFragment;
        "today()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "NAME" | "VERSION" | "changeMasterCopy" | "dailyLimits" | "manager" | "setup" | "changeDailyLimit" | "executeDailyLimit" | "today"): FunctionFragment;
    encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
    encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "changeMasterCopy", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "dailyLimits", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setup", values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "changeDailyLimit", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "executeDailyLimit", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "today", values?: undefined): string;
    decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "changeMasterCopy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dailyLimits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "changeDailyLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeDailyLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "today", data: BytesLike): Result;
    events: {
        "ChangedMasterCopy(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ChangedMasterCopy"): EventFragment;
}
export interface ChangedMasterCopyEventObject {
    masterCopy: string;
}
export type ChangedMasterCopyEvent = TypedEvent<[
    string
], ChangedMasterCopyEventObject>;
export type ChangedMasterCopyEventFilter = TypedEventFilter<ChangedMasterCopyEvent>;
export interface DailyLimitModule extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DailyLimitModuleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        NAME(overrides?: CallOverrides): Promise<[string]>;
        VERSION(overrides?: CallOverrides): Promise<[string]>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        dailyLimits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            dailyLimit: BigNumber;
            spentToday: BigNumber;
            lastDay: BigNumber;
        }>;
        manager(overrides?: CallOverrides): Promise<[string]>;
        /**
         * Setup function sets initial storage of contract.
         * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
         * @param tokens List of token addresses. Ether is represented with address 0x0.
         */
        setup(tokens: PromiseOrValue<string>[], _dailyLimits: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        /**
         * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
         * @param dailyLimit Daily limit in smallest token unit.
         * @param token Token contract address.
         */
        changeDailyLimit(token: PromiseOrValue<string>, dailyLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        /**
         * Returns if Safe transaction is a valid daily limit transaction.
         * @param amount Amount of tokens (or Ether) that should be transfered
         * @param to Address to which the tokens should be transfered
         * @param token Address of the token that should be transfered (0 for Ether)
         * @returns Returns if transaction can be executed.
         */
        executeDailyLimit(token: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        /**
         * Returns last midnight as Unix timestamp.
         * @returns Unix timestamp.
         */
        today(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    NAME(overrides?: CallOverrides): Promise<string>;
    VERSION(overrides?: CallOverrides): Promise<string>;
    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    dailyLimits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        dailyLimit: BigNumber;
        spentToday: BigNumber;
        lastDay: BigNumber;
    }>;
    manager(overrides?: CallOverrides): Promise<string>;
    /**
     * Setup function sets initial storage of contract.
     * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
     * @param tokens List of token addresses. Ether is represented with address 0x0.
     */
    setup(tokens: PromiseOrValue<string>[], _dailyLimits: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    /**
     * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
     * @param dailyLimit Daily limit in smallest token unit.
     * @param token Token contract address.
     */
    changeDailyLimit(token: PromiseOrValue<string>, dailyLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    /**
     * Returns if Safe transaction is a valid daily limit transaction.
     * @param amount Amount of tokens (or Ether) that should be transfered
     * @param to Address to which the tokens should be transfered
     * @param token Address of the token that should be transfered (0 for Ether)
     * @returns Returns if transaction can be executed.
     */
    executeDailyLimit(token: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    /**
     * Returns last midnight as Unix timestamp.
     * @returns Unix timestamp.
     */
    today(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        NAME(overrides?: CallOverrides): Promise<string>;
        VERSION(overrides?: CallOverrides): Promise<string>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        dailyLimits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            dailyLimit: BigNumber;
            spentToday: BigNumber;
            lastDay: BigNumber;
        }>;
        manager(overrides?: CallOverrides): Promise<string>;
        /**
         * Setup function sets initial storage of contract.
         * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
         * @param tokens List of token addresses. Ether is represented with address 0x0.
         */
        setup(tokens: PromiseOrValue<string>[], _dailyLimits: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        /**
         * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
         * @param dailyLimit Daily limit in smallest token unit.
         * @param token Token contract address.
         */
        changeDailyLimit(token: PromiseOrValue<string>, dailyLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        /**
         * Returns if Safe transaction is a valid daily limit transaction.
         * @param amount Amount of tokens (or Ether) that should be transfered
         * @param to Address to which the tokens should be transfered
         * @param token Address of the token that should be transfered (0 for Ether)
         * @returns Returns if transaction can be executed.
         */
        executeDailyLimit(token: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        /**
         * Returns last midnight as Unix timestamp.
         * @returns Unix timestamp.
         */
        today(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "ChangedMasterCopy(address)"(masterCopy?: null): ChangedMasterCopyEventFilter;
        ChangedMasterCopy(masterCopy?: null): ChangedMasterCopyEventFilter;
    };
    estimateGas: {
        NAME(overrides?: CallOverrides): Promise<BigNumber>;
        VERSION(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        dailyLimits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        manager(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Setup function sets initial storage of contract.
         * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
         * @param tokens List of token addresses. Ether is represented with address 0x0.
         */
        setup(tokens: PromiseOrValue<string>[], _dailyLimits: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        /**
         * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
         * @param dailyLimit Daily limit in smallest token unit.
         * @param token Token contract address.
         */
        changeDailyLimit(token: PromiseOrValue<string>, dailyLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        /**
         * Returns if Safe transaction is a valid daily limit transaction.
         * @param amount Amount of tokens (or Ether) that should be transfered
         * @param to Address to which the tokens should be transfered
         * @param token Address of the token that should be transfered (0 for Ether)
         * @returns Returns if transaction can be executed.
         */
        executeDailyLimit(token: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        /**
         * Returns last midnight as Unix timestamp.
         * @returns Unix timestamp.
         */
        today(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        dailyLimits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Setup function sets initial storage of contract.
         * @param _dailyLimits List of daily limits in smalles units (e.g. Wei for Ether).
         * @param tokens List of token addresses. Ether is represented with address 0x0.
         */
        setup(tokens: PromiseOrValue<string>[], _dailyLimits: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Allows to update the daily limit for a specified token. This can only be done via a Safe transaction.
         * @param dailyLimit Daily limit in smallest token unit.
         * @param token Token contract address.
         */
        changeDailyLimit(token: PromiseOrValue<string>, dailyLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Returns if Safe transaction is a valid daily limit transaction.
         * @param amount Amount of tokens (or Ether) that should be transfered
         * @param to Address to which the tokens should be transfered
         * @param token Address of the token that should be transfered (0 for Ether)
         * @returns Returns if transaction can be executed.
         */
        executeDailyLimit(token: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Returns last midnight as Unix timestamp.
         * @returns Unix timestamp.
         */
        today(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
