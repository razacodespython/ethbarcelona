import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../../common";
export interface SocialRecoveryModuleInterface extends utils.Interface {
    functions: {
        "NAME()": FunctionFragment;
        "VERSION()": FunctionFragment;
        "changeMasterCopy(address)": FunctionFragment;
        "friends(uint256)": FunctionFragment;
        "isConfirmed(bytes32,address)": FunctionFragment;
        "isExecuted(bytes32)": FunctionFragment;
        "isFriend(address)": FunctionFragment;
        "manager()": FunctionFragment;
        "threshold()": FunctionFragment;
        "setup(address[],uint256)": FunctionFragment;
        "confirmTransaction(bytes32)": FunctionFragment;
        "recoverAccess(address,address,address)": FunctionFragment;
        "isConfirmedByRequiredFriends(bytes32)": FunctionFragment;
        "getDataHash(bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "NAME" | "VERSION" | "changeMasterCopy" | "friends" | "isConfirmed" | "isExecuted" | "isFriend" | "manager" | "threshold" | "setup" | "confirmTransaction" | "recoverAccess" | "isConfirmedByRequiredFriends" | "getDataHash"): FunctionFragment;
    encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
    encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "changeMasterCopy", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "friends", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isConfirmed", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isExecuted", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "isFriend", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "setup", values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "confirmTransaction", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "recoverAccess", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "isConfirmedByRequiredFriends", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getDataHash", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "changeMasterCopy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "friends", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isConfirmed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isExecuted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isFriend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "confirmTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recoverAccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isConfirmedByRequiredFriends", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDataHash", data: BytesLike): Result;
    events: {
        "ChangedMasterCopy(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ChangedMasterCopy"): EventFragment;
}
export interface ChangedMasterCopyEventObject {
    masterCopy: string;
}
export type ChangedMasterCopyEvent = TypedEvent<[
    string
], ChangedMasterCopyEventObject>;
export type ChangedMasterCopyEventFilter = TypedEventFilter<ChangedMasterCopyEvent>;
export interface SocialRecoveryModule extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SocialRecoveryModuleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        NAME(overrides?: CallOverrides): Promise<[string]>;
        VERSION(overrides?: CallOverrides): Promise<[string]>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        friends(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        isConfirmed(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isExecuted(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        isFriend(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        manager(overrides?: CallOverrides): Promise<[string]>;
        threshold(overrides?: CallOverrides): Promise<[BigNumber]>;
        /**
         * Setup function sets initial storage of contract.
         * @param _friends List of friends' addresses.
         * @param _threshold Required number of friends to confirm replacement.
         */
        setup(_friends: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        /**
         * Allows a friend to confirm a Safe transaction.
         * @param dataHash Safe transaction hash.
         */
        confirmTransaction(dataHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param newOwner New owner address.
         * @param oldOwner Owner address to be replaced.
         * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
         * @returns Returns if transaction can be executed.
         */
        recoverAccess(prevOwner: PromiseOrValue<string>, oldOwner: PromiseOrValue<string>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param dataHash Data hash.
         * @returns Confirmation status.
         */
        isConfirmedByRequiredFriends(dataHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        /**
         * Returns hash of data encoding owner replacement.
         * @param data Data payload.
         * @returns Data hash.
         */
        getDataHash(data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    NAME(overrides?: CallOverrides): Promise<string>;
    VERSION(overrides?: CallOverrides): Promise<string>;
    /**
     * Allows to upgrade the contract. This can only be done via a Safe transaction.
     * @param _masterCopy New contract address.
     */
    changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    friends(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isConfirmed(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isExecuted(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    isFriend(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    manager(overrides?: CallOverrides): Promise<string>;
    threshold(overrides?: CallOverrides): Promise<BigNumber>;
    /**
     * Setup function sets initial storage of contract.
     * @param _friends List of friends' addresses.
     * @param _threshold Required number of friends to confirm replacement.
     */
    setup(_friends: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    /**
     * Allows a friend to confirm a Safe transaction.
     * @param dataHash Safe transaction hash.
     */
    confirmTransaction(dataHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    /**
     * Returns if Safe transaction is a valid owner replacement transaction.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     * @returns Returns if transaction can be executed.
     */
    recoverAccess(prevOwner: PromiseOrValue<string>, oldOwner: PromiseOrValue<string>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    /**
     * Returns if Safe transaction is a valid owner replacement transaction.
     * @param dataHash Data hash.
     * @returns Confirmation status.
     */
    isConfirmedByRequiredFriends(dataHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    /**
     * Returns hash of data encoding owner replacement.
     * @param data Data payload.
     * @returns Data hash.
     */
    getDataHash(data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        NAME(overrides?: CallOverrides): Promise<string>;
        VERSION(overrides?: CallOverrides): Promise<string>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        friends(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isConfirmed(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isExecuted(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        isFriend(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        manager(overrides?: CallOverrides): Promise<string>;
        threshold(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Setup function sets initial storage of contract.
         * @param _friends List of friends' addresses.
         * @param _threshold Required number of friends to confirm replacement.
         */
        setup(_friends: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        /**
         * Allows a friend to confirm a Safe transaction.
         * @param dataHash Safe transaction hash.
         */
        confirmTransaction(dataHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param newOwner New owner address.
         * @param oldOwner Owner address to be replaced.
         * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
         * @returns Returns if transaction can be executed.
         */
        recoverAccess(prevOwner: PromiseOrValue<string>, oldOwner: PromiseOrValue<string>, newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param dataHash Data hash.
         * @returns Confirmation status.
         */
        isConfirmedByRequiredFriends(dataHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        /**
         * Returns hash of data encoding owner replacement.
         * @param data Data payload.
         * @returns Data hash.
         */
        getDataHash(data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ChangedMasterCopy(address)"(masterCopy?: null): ChangedMasterCopyEventFilter;
        ChangedMasterCopy(masterCopy?: null): ChangedMasterCopyEventFilter;
    };
    estimateGas: {
        NAME(overrides?: CallOverrides): Promise<BigNumber>;
        VERSION(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        friends(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isConfirmed(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isExecuted(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        isFriend(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        manager(overrides?: CallOverrides): Promise<BigNumber>;
        threshold(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Setup function sets initial storage of contract.
         * @param _friends List of friends' addresses.
         * @param _threshold Required number of friends to confirm replacement.
         */
        setup(_friends: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        /**
         * Allows a friend to confirm a Safe transaction.
         * @param dataHash Safe transaction hash.
         */
        confirmTransaction(dataHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param newOwner New owner address.
         * @param oldOwner Owner address to be replaced.
         * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
         * @returns Returns if transaction can be executed.
         */
        recoverAccess(prevOwner: PromiseOrValue<string>, oldOwner: PromiseOrValue<string>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param dataHash Data hash.
         * @returns Confirmation status.
         */
        isConfirmedByRequiredFriends(dataHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Returns hash of data encoding owner replacement.
         * @param data Data payload.
         * @returns Data hash.
         */
        getDataHash(data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        friends(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isConfirmed(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isExecuted(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isFriend(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Setup function sets initial storage of contract.
         * @param _friends List of friends' addresses.
         * @param _threshold Required number of friends to confirm replacement.
         */
        setup(_friends: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Allows a friend to confirm a Safe transaction.
         * @param dataHash Safe transaction hash.
         */
        confirmTransaction(dataHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param newOwner New owner address.
         * @param oldOwner Owner address to be replaced.
         * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
         * @returns Returns if transaction can be executed.
         */
        recoverAccess(prevOwner: PromiseOrValue<string>, oldOwner: PromiseOrValue<string>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param dataHash Data hash.
         * @returns Confirmation status.
         */
        isConfirmedByRequiredFriends(dataHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Returns hash of data encoding owner replacement.
         * @param data Data payload.
         * @returns Data hash.
         */
        getDataHash(data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
