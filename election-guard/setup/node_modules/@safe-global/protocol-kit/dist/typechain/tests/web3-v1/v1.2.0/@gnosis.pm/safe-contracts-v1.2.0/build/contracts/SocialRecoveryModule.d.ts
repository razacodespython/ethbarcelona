/// <reference types="node" />
import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type { Callback, NonPayableTransactionObject, BlockType, ContractEventLog, BaseContract } from "../../../../types";
export interface EventOptions {
    filter?: object;
    fromBlock?: BlockType;
    topics?: string[];
}
export type ChangedMasterCopy = ContractEventLog<{
    masterCopy: string;
    0: string;
}>;
export interface SocialRecoveryModule extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): SocialRecoveryModule;
    clone(): SocialRecoveryModule;
    methods: {
        NAME(): NonPayableTransactionObject<string>;
        VERSION(): NonPayableTransactionObject<string>;
        /**
         * Allows to upgrade the contract. This can only be done via a Safe transaction.
         * @param _masterCopy New contract address.
         */
        changeMasterCopy(_masterCopy: string): NonPayableTransactionObject<void>;
        friends(arg0: number | string | BN): NonPayableTransactionObject<string>;
        isConfirmed(arg0: string | number[], arg1: string): NonPayableTransactionObject<boolean>;
        isExecuted(arg0: string | number[]): NonPayableTransactionObject<boolean>;
        isFriend(arg0: string): NonPayableTransactionObject<boolean>;
        manager(): NonPayableTransactionObject<string>;
        threshold(): NonPayableTransactionObject<string>;
        /**
         * Setup function sets initial storage of contract.
         * @param _friends List of friends' addresses.
         * @param _threshold Required number of friends to confirm replacement.
         */
        setup(_friends: string[], _threshold: number | string | BN): NonPayableTransactionObject<void>;
        /**
         * Allows a friend to confirm a Safe transaction.
         * @param dataHash Safe transaction hash.
         */
        confirmTransaction(dataHash: string | number[]): NonPayableTransactionObject<void>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param newOwner New owner address.
         * @param oldOwner Owner address to be replaced.
         * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
         * @returns Returns if transaction can be executed.
         */
        recoverAccess(prevOwner: string, oldOwner: string, newOwner: string): NonPayableTransactionObject<void>;
        /**
         * Returns if Safe transaction is a valid owner replacement transaction.
         * @param dataHash Data hash.
         * @returns Confirmation status.
         */
        isConfirmedByRequiredFriends(dataHash: string | number[]): NonPayableTransactionObject<boolean>;
        /**
         * Returns hash of data encoding owner replacement.
         * @param data Data payload.
         * @returns Data hash.
         */
        getDataHash(data: string | number[]): NonPayableTransactionObject<string>;
    };
    events: {
        ChangedMasterCopy(cb?: Callback<ChangedMasterCopy>): EventEmitter;
        ChangedMasterCopy(options?: EventOptions, cb?: Callback<ChangedMasterCopy>): EventEmitter;
        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
    };
    once(event: "ChangedMasterCopy", cb: Callback<ChangedMasterCopy>): void;
    once(event: "ChangedMasterCopy", options: EventOptions, cb: Callback<ChangedMasterCopy>): void;
}
